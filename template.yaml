AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Common AWS Infrastructure

Parameters:
  Stage:
    Type: String
  OrganizationId:
    Type: String

Globals:
  Function:
    Timeout: 30    
    MemorySize: 2048

    LoggingConfig:
      LogFormat: JSON

    Environment:
      Variables:
        Stage: !Ref Stage
        DbRegion: us-east-1
        RtRegion: !Sub ${AWS::Region}

Resources:
  UserConnectedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub UserConnected
      DisplayName: !Sub UserConnected

  MessageQueueTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MessageQueue
      AttributeDefinitions:
        - AttributeName: queueName
          AttributeType: S
        - AttributeName: eventId
          AttributeType: S
      KeySchema:
        - AttributeName: queueName
          KeyType: HASH
        - AttributeName: eventId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      ResourcePolicy:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - dynamodb:*
              Resource: 
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MessageQueue
              Condition:
                StringEquals:
                  aws:PrincipalOrgID: !Sub ${OrganizationId}

  FunctionWarmingIndex:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub FunctionWarmingIndex
      AttributeDefinitions: 
        - AttributeName: region
          AttributeType: S
        - AttributeName: priority
          AttributeType: N
      KeySchema: 
        - AttributeName: region
          KeyType: HASH
        - AttributeName: priority
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  WarmServicesFunction:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: WarmServices
      CodeUri: ./src
      Handler: handler.main
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Role: !GetAtt WarmServicesLambdaExecutionRole.Arn
      Events:
        SNSTrigger:
          Type: SNS
          Properties:
            Topic: !Ref UserConnectedTopic 
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      SourcesContent: true
      BuildProperties:
        Minify: true
        Target: es2020
        EntryPoints:
        - functions/warm-services/handler.ts
        External:
        - node_modules
        - aws-sdk
        - .esbuild
        - .github
  
  # IAM Role for Lambda to allow invocation by SNS
  WarmServicesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSNSInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Permissions to create and manage logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
                              
              # Permission for the Lambda function to invoke other Lambda functions
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: arn:aws:lambda:*:*:function:*

              # Allow Lambda to receive SNS messages
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref UserConnectedTopic

              # Permission for Lambda to read from DynamoDB table
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt FunctionWarmingIndex.Arn

Outputs:
  SNSTopicArn:
    Description: ARN of the UserConnectedTopic
    Value: !Ref UserConnectedTopic
  LambdaFunctionArn:
    Description: ARN of the WarmServicesFunction
    Value: !GetAtt WarmServicesFunction.Arn
  WarmServicesLambdaExecutionRoleArn:
    Description: ARN of the WarmServicesLambdaExecutionRole
    Value: !GetAtt WarmServicesLambdaExecutionRole.Arn
  FunctionWarmingIndexArn:
    Description: ARN of the FunctionWarmingIndex
    Value: !GetAtt FunctionWarmingIndex.Arn
  MessageQueueResourceArn:
    Description: ARN of the Message Queue table
    Value: !GetAtt MessageQueueTable.Arn