AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Common AWS Infrastructure

Parameters:
  Stage:
    Type: String

Globals:
  Function:
    Timeout: 30    
    MemorySize: 1024

    LoggingConfig:
      LogFormat: JSON

    Environment:
      Variables:
        Stage: !Ref Stage
        RtRegion: !Sub ${AWS::Region}

Resources:
  UserConnectedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub Splitsies-UserConnected-${Stage}
      DisplayName: !Sub Splitsies-UserConnected-${Stage}

  UserAccountModifiedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub Splitsies-UserAccountModified-${Stage}

  UserAccountModifiedQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub Splitsies-UserAccountModifiedQueue-${Stage}

  UserAccountModifiedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues:
        - !Ref UserAccountModifiedQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt UserAccountModifiedQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref UserAccountModifiedTopic

  # SNS Subscription to SQS Queue
  UserAccountModifiedSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref UserAccountModifiedTopic
      Protocol: sqs
      Endpoint: !GetAtt UserAccountModifiedQueue.Arn

  FunctionWarmingIndex:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub Splitsies-FunctionWarmingIndex-${Stage}
      AttributeDefinitions: 
        - AttributeName: region
          AttributeType: S
        - AttributeName: priority
          AttributeType: N
      KeySchema: 
        - AttributeName: region
          KeyType: HASH
        - AttributeName: priority
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  WarmServicesFunction:
    Type: AWS::Serverless::Function
    Properties: 
      CodeUri: ./src
      Handler: handler.main
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Role: !GetAtt WarmServicesLambdaExecutionRole.Arn
      Events:
        SNSTrigger:
          Type: SNS
          Properties:
            Topic: !Ref UserConnectedTopic 
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      SourcesContent: true
      BuildProperties:
        Minify: true
        Target: es2020
        EntryPoints:
        - functions/warm-services/handler.ts
        External:
        - node_modules
        - aws-sdk
        - .esbuild
        - .github
  
  # IAM Role for Lambda to allow invocation by SNS
  WarmServicesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSNSInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Permissions to create and manage logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
                              
              # Permission for the Lambda function to invoke other Lambda functions
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: arn:aws:lambda:*:*:function:*

              # Allow Lambda to receive SNS messages
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref UserConnectedTopic

              # Permission for Lambda to read from DynamoDB table
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt FunctionWarmingIndex.Arn

Outputs:
  SNSTopicArn:
    Description: ARN of the UserConnectedTopic
    Value: !Ref UserConnectedTopic
  LambdaFunctionArn:
    Description: ARN of the WarmServicesFunction
    Value: !GetAtt WarmServicesFunction.Arn
  WarmServicesLambdaExecutionRoleArn:
    Description: ARN of the WarmServicesLambdaExecutionRole
    Value: !GetAtt WarmServicesLambdaExecutionRole.Arn
  FunctionWarmingIndexArn:
    Description: ARN of the FunctionWarmingIndex
    Value: !GetAtt FunctionWarmingIndex.Arn
  UserAccountModifiedTopicArn:
    Description: The ARN of the UserAccountModifiedTopic SNS topic
    Value: !Ref UserAccountModifiedTopic
  UserAccountModifiedQueueArn:
    Description: The ARN of the UserAccountModifiedQueue SQS queue
    Value: !GetAtt UserAccountModifiedQueue.Arn
  UserAccountModifiedQueueUrl:
    Description: The URL of the UserAccountModifiedQueue SQS queue
    Value: !Ref UserAccountModifiedQueue
